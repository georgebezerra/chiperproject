{"version":3,"sources":["utils/_DATA.js","utils/api.js","actions/users.js","actions/tweets.js","actions/authedUser.js","actions/shared.js","utils/helpers.js","components/Tweet.js","components/Dashboard.js","components/NewTweet.js","components/TweetPage.js","components/Nav.js","components/App.js","reducers/index.js","reducers/authedUser.js","reducers/users.js","reducers/tweets.js","middleware/logger.js","middleware/index.js","index.js"],"names":["users","sarah_edo","id","name","avatarURL","tweets","tylermcginnis","dan_abramov","8xf0y6ziyjabvozdd253nd","text","author","timestamp","likes","replies","replyingTo","5c9qojr2d1738zlx09afby","f4xzgapq7mu783k9t02ghx","hbsc73kzqi75rg7v1e0i6a","5w6k1n34dkp1x29cuzn2zn","czpa59mg577x1oo45cup0d","2mb6re13q842wu8n106bhk","nnvkjqoevs8t02lzcc0ky","omdbjl68fxact38hk7ypy6","4pt0px8l0l9g6y69ylivti","6h5ims9iks66d4m7kqizmv","fap8sdxppna8oabnxljzcv","3km0v4hf1ps92ajf4z2ytg","njv20mq7jsxa6bgsqc97","leqp4lzfox7cqvsgdj0e7","sfljgka8pfddbcer8nuxv","3sklxkf9yyfowrf0o1ftbb","26p5pskqi88i58qmza2gid","xi3ca2jcfvpa0i3t4m7ag","r0xu2v1qrxa6ygtvf2rkjw","_saveTweet","_ref3","Promise","res","rej","formattedTweet","_ref2","_ref2$replyingTo","Math","random","toString","substring","Date","now","formatTweet","setTimeout","Object","objectSpread","defineProperty","concat","saveLikeToggle","info","_ref","hasLiked","authedUser","filter","uid","_saveLikeToggle","RECEIVE_USERS","RECEIVE_TWEETS","TOGGLE_TWEET","ADD_TWEET","toggleTweet","type","handleAddTweet","dispatch","getState","showLoading","then","tweet","addTweet","hideLoading","SET_AUTHED_USER","AUTHED_ID","handleInitialData","all","slicedToArray","receiveUsers","receiveTweets","parentTweet","avatar","length","includes","parent","Tweet","handleLike","e","preventDefault","_this$props","_this","props","catch","console","warn","alert","toParent","history","push","_this2","this","log","react_default","a","createElement","Link","to","className","src","alt","d","time","toLocaleTimeString","substr","slice","toLocaleDateString","formatDate","onClick","ti","color","Component","withRouter","connect","Dashboard","tweetIds","map","key","components_Tweet","keys","sort","b","NewTweet","state","toHome","handleChange","target","value","setState","handleSubmit","_this$state","Redirect","tweetLeft","onSubmit","placeholder","onChange","maxLength","disabled","TweetPage","components_NewTweet","replyId","match","params","Nav","NavLink","exact","activeClassName","App","BrowserRouter","react","build_default","loading","Route","path","component","combineReducers","arguments","undefined","action","loadingBar","loadingBarReducer","logger","store","next","group","returnValue","groupEnd","applyMiddleware","thunk","createStore","reducer","middleware","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.1a08fb9a.chunk.js","sourcesContent":["let users = {\n  sarah_edo: {\n    id: \"sarah_edo\",\n    name: \"Sarah Drasner\",\n    avatarURL: \"https://tylermcginnis.com/would-you-rather/sarah.jpg\",\n    tweets: ['8xf0y6ziyjabvozdd253nd', 'hbsc73kzqi75rg7v1e0i6a', '2mb6re13q842wu8n106bhk', '6h5ims9iks66d4m7kqizmv', '3sklxkf9yyfowrf0o1ftbb'],\n  },\n  tylermcginnis: {\n    id: \"tylermcginnis\",\n    name: \"Tyler McGinnis\",\n    avatarURL: \"https://tylermcginnis.com/would-you-rather/tyler.jpg\",\n    tweets: ['5c9qojr2d1738zlx09afby', 'f4xzgapq7mu783k9t02ghx', 'nnvkjqoevs8t02lzcc0ky', '4pt0px8l0l9g6y69ylivti', 'fap8sdxppna8oabnxljzcv', 'leqp4lzfox7cqvsgdj0e7', '26p5pskqi88i58qmza2gid', 'xi3ca2jcfvpa0i3t4m7ag'],\n  },\n  dan_abramov: {\n    id: \"dan_abramov\",\n    name: \"Dan Abramov\",\n    avatarURL: \"https://tylermcginnis.com/would-you-rather/dan.jpg\",\n    tweets: ['5w6k1n34dkp1x29cuzn2zn', 'czpa59mg577x1oo45cup0d', 'omdbjl68fxact38hk7ypy6', '3km0v4hf1ps92ajf4z2ytg', 'njv20mq7jsxa6bgsqc97', 'sfljgka8pfddbcer8nuxv', 'r0xu2v1qrxa6ygtvf2rkjw'],\n  }\n}\n\nlet tweets = {\n  \"8xf0y6ziyjabvozdd253nd\": {\n    id: \"8xf0y6ziyjabvozdd253nd\",\n    text: \"Shoutout to all the speakers I know for whom English is not a first language, but can STILL explain a concept well. It's hard enough to give a good talk in your mother tongue!\",\n    author: \"sarah_edo\",\n    timestamp: 1518122597860,\n    likes: ['tylermcginnis'],\n    replies: ['fap8sdxppna8oabnxljzcv', '3km0v4hf1ps92ajf4z2ytg'],\n    replyingTo: null,\n  },\n  \"5c9qojr2d1738zlx09afby\": {\n    id: \"5c9qojr2d1738zlx09afby\",\n    text: \"I hope one day the propTypes pendulum swings back. Such a simple yet effective API. Was one of my favorite parts of React.\",\n    author: \"tylermcginnis\",\n    timestamp: 1518043995650,\n    likes: ['sarah_edo', 'dan_abramov'],\n    replies: ['njv20mq7jsxa6bgsqc97'],\n    replyingTo: null,\n  },\n  \"f4xzgapq7mu783k9t02ghx\": {\n    id: \"f4xzgapq7mu783k9t02ghx\",\n    text: \"Want to work at Facebook/Google/:BigCompany? Start contributing code long before you ever interview there.\",\n    author: \"tylermcginnis\",\n    timestamp: 1517043995650,\n    likes: ['dan_abramov'],\n    replies: [],\n    replyingTo: null,\n  },\n  \"hbsc73kzqi75rg7v1e0i6a\": {\n    id: \"hbsc73kzqi75rg7v1e0i6a\",\n    text: \"Puppies 101: buy a hamper with a lid on it.\",\n    author: \"sarah_edo\",\n    timestamp: 1516043995650,\n    likes: ['tylermcginnis'],\n    replies: ['leqp4lzfox7cqvsgdj0e7', 'sfljgka8pfddbcer8nuxv'],\n    replyingTo: null,\n  },\n  \"5w6k1n34dkp1x29cuzn2zn\": {\n    id: \"5w6k1n34dkp1x29cuzn2zn\",\n    text: \"Is there a metric like code coverage, but that shows lines that, if changed (in a syntactically correct way), wouldn’t cause tests to fail?\",\n    author: \"dan_abramov\",\n    timestamp: 1515043995650,\n    likes: ['sarah_edo'],\n    replies: [],\n    replyingTo: null,\n  },\n  \"czpa59mg577x1oo45cup0d\": {\n    id: \"czpa59mg577x1oo45cup0d\",\n    text: \"React came out 'rethinking best practices'. It has since accumulated 'best practices' of its own. Let’s see if we can do better.\",\n    author: \"dan_abramov\",\n    timestamp: 1515043995650,\n    likes: ['tylermcginnis', 'sarah_edo'],\n    replies: ['3sklxkf9yyfowrf0o1ftbb'],\n    replyingTo: null,\n  },\n  \"2mb6re13q842wu8n106bhk\": {\n    id: \"2mb6re13q842wu8n106bhk\",\n    text: \"I think I realized I like dogs so much because I can really relate to being motivated by snacks\",\n    author: \"sarah_edo\",\n    timestamp: 1514043995650,\n    likes: ['dan_abramov'],\n    replies: ['26p5pskqi88i58qmza2gid'],\n    replyingTo: null,\n  },\n  \"nnvkjqoevs8t02lzcc0ky\": {\n    id: \"nnvkjqoevs8t02lzcc0ky\",\n    text: \"Maybe the real benefit of open source was the friendships we made along the way?\",\n    author: \"tylermcginnis\",\n    timestamp: 1513043995650,\n    likes: [],\n    replies: [],\n    replyingTo: null,\n  },\n  \"omdbjl68fxact38hk7ypy6\": {\n    id: \"omdbjl68fxact38hk7ypy6\",\n    text: \"A 7-minute Paul Joseph Watson video being translated and aired by a Russian state TV channel is the most surreal thing I’ve seen in 2018 yet\",\n    author: \"dan_abramov\",\n    timestamp: 1512043995650,\n    likes: [],\n    replies: [],\n    replyingTo: null,\n  },\n  \"4pt0px8l0l9g6y69ylivti\": {\n    id: \"4pt0px8l0l9g6y69ylivti\",\n    text: \"Talking less about the downsides of OSS and focusing on some of the huge potential upsides for once might just help get more people into it.\",\n    author: \"tylermcginnis\",\n    timestamp: 1511043995650,\n    likes: ['dan_abramov'],\n    replies: [],\n    replyingTo: null,\n  },\n  \"6h5ims9iks66d4m7kqizmv\": {\n    id: \"6h5ims9iks66d4m7kqizmv\",\n    text: \"By the way, if you have a blog post sitting around and want to get some eyes on it, we take guest submissions! That's how I started.\",\n    author: \"sarah_edo\",\n    timestamp: 1510043995650,\n    likes: ['dan_abramov', 'tylermcginnis'],\n    replies: ['xi3ca2jcfvpa0i3t4m7ag', 'r0xu2v1qrxa6ygtvf2rkjw'],\n    replyingTo: null,\n  },\n  \"fap8sdxppna8oabnxljzcv\": {\n    id: \"fap8sdxppna8oabnxljzcv\",\n    author: \"tylermcginnis\",\n    text: \"I agree. I'm always really impressed when I see someone giving a talk in a language that's not their own.\",\n    timestamp: 1518122677860,\n    likes: ['sarah_edo'],\n    replyingTo: \"8xf0y6ziyjabvozdd253nd\",\n    replies: [],\n  },\n  \"3km0v4hf1ps92ajf4z2ytg\": {\n    id: \"3km0v4hf1ps92ajf4z2ytg\",\n    author: \"dan_abramov\",\n    text: \"It can be difficult at times.\",\n    timestamp: 1518122667860,\n    likes: [],\n    replyingTo: \"8xf0y6ziyjabvozdd253nd\",\n    replies: [],\n  },\n  \"njv20mq7jsxa6bgsqc97\": {\n    id: \"njv20mq7jsxa6bgsqc97\",\n    author: \"dan_abramov\",\n    text: \"Sometimes you have to sacrifice simplicity for power.\",\n    timestamp: 1518044095650,\n    likes: ['tylermcginnis'],\n    replyingTo: \"5c9qojr2d1738zlx09afby\",\n    replies: [],\n  },\n  \"leqp4lzfox7cqvsgdj0e7\": {\n    id: \"leqp4lzfox7cqvsgdj0e7\",\n    author: \"tylermcginnis\",\n    text: \"Also trashcans. Learned this the hard way.\",\n    timestamp: 1516043255650,\n    likes: [],\n    replyingTo: \"hbsc73kzqi75rg7v1e0i6a\",\n    replies: [],\n  },\n  \"sfljgka8pfddbcer8nuxv\": {\n    id: \"sfljgka8pfddbcer8nuxv\",\n    author: \"dan_abramov\",\n    text: \"Puppies are the best.\",\n    timestamp: 1516045995650,\n    likes: ['sarah_edo', 'tylermcginnis'],\n    replyingTo: \"hbsc73kzqi75rg7v1e0i6a\",\n    replies: [],\n  },\n  \"3sklxkf9yyfowrf0o1ftbb\": {\n    id: \"3sklxkf9yyfowrf0o1ftbb\",\n    author: \"sarah_edo\",\n    text: \"The idea of best practices being a negative thing is an interesting concept.\",\n    timestamp: 1515044095650,\n    likes: ['dan_abramov'],\n    replyingTo: \"czpa59mg577x1oo45cup0d\",\n    replies: [],\n  },\n  \"26p5pskqi88i58qmza2gid\": {\n    id: \"26p5pskqi88i58qmza2gid\",\n    author: \"tylermcginnis\",\n    text: \"Too relatable\",\n    timestamp: 1514044994650,\n    likes: ['sarah_edo'],\n    replyingTo: \"2mb6re13q842wu8n106bhk\",\n    replies: [],\n  },\n  \"xi3ca2jcfvpa0i3t4m7ag\": {\n    id: \"xi3ca2jcfvpa0i3t4m7ag\",\n    author: \"tylermcginnis\",\n    text: \"Just DMd you!\",\n    timestamp: 1510043995650,\n    likes: [],\n    replyingTo: \"6h5ims9iks66d4m7kqizmv\",\n    replies: [],\n  },\n  \"r0xu2v1qrxa6ygtvf2rkjw\": {\n    id: \"r0xu2v1qrxa6ygtvf2rkjw\",\n    author: \"dan_abramov\",\n    text: \"This is a great idea.\",\n    timestamp: 1510044395650,\n    likes: ['tylermcginnis'],\n    replyingTo: \"6h5ims9iks66d4m7kqizmv\",\n    replies: [],\n  },\n}\n\nexport function _getUsers () {\n  return new Promise((res, rej) => {\n    setTimeout(() => res({...users}), 1000)\n  })\n}\n\nexport function _getTweets () {\n  return new Promise((res, rej) => {\n    setTimeout(() => res({...tweets}), 1000)\n  })\n}\n\nexport function _saveLikeToggle ({ id, hasLiked, authedUser }) {\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      tweets = {\n        ...tweets,\n        [id]: {\n          ...tweets[id],\n          likes: hasLiked === true\n            ? tweets[id].likes.filter((uid) => uid !== authedUser)\n            : tweets[id].likes.concat([authedUser])\n        }\n      }\n\n      res()\n    }, 500)\n  })\n}\n\nfunction generateUID () {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n}\n\nfunction formatTweet ({ author, text, replyingTo = null }) {\n  return {\n    author,\n    id: generateUID(),\n    likes: [],\n    replies: [],\n    text,\n    timestamp: Date.now(),\n    replyingTo,\n  }\n}\n\nexport function _saveTweet ({ text, author, replyingTo }) {\n  return new Promise((res, rej) => {\n    const formattedTweet = formatTweet({\n      text,\n      author,\n      replyingTo\n    })\n\n    setTimeout(() => {\n      tweets = {\n        ...tweets,\n        [formattedTweet.id]: formattedTweet,\n      }\n\n      users = {\n        ...users,\n        [author]: {\n          ...users[author],\n          tweets: users[author].tweets.concat([formattedTweet.id])\n        }\n      }\n\n      res(formattedTweet)\n    }, 1000)\n  })\n}\n","import {\n  _getUsers,\n  _getTweets,\n  _saveLikeToggle,\n  _saveTweet,\n} from './_DATA.js'\n\nexport function getInitialData () {\n  return Promise.all([\n    _getUsers(),\n    _getTweets(),\n  ]).then(([users, tweets]) => ({\n    users,\n    tweets,\n  }))\n}\n\n//Função para salvar as curtidas no DB, com o coração cheio ou não.\nexport function saveLikeToggle (info) {\n  return _saveLikeToggle(info)\n}\n\n//Função para salvar os Tweets no DB.\nexport function saveTweet (info) {\n  return _saveTweet(info)\n}\n","//Action Type de quando recebermos e dispararmos os usuários para atualizar a Store.\nexport const RECEIVE_USERS = 'RECEIVE_USERS'\n\n//Action Creator para executar o Action Typer.\nexport function receiveUsers (users) { //Passando users como primeiro argumento, quando a função é chamada.\n  return { //return um objeto ou a ação do tipo RECEIVE_USERS\n    type: RECEIVE_USERS,\n    users,\n  }\n}\n","//importando a função para salvar as curtidas no DB, com o coração cheio ou não\nimport { saveLikeToggle } from '../utils/api'\n\n//importando a função para salvar o novo tweet no DB.\nimport { saveTweet } from '../utils/api'\n\n//Exibir a barra de carregamento sempre que salvarmos ou adicionarmos um tweet à Store\nimport { showLoading, hideLoading } from 'react-redux-loading'\n\n//Action Type de quando recebermos e dispararmos os tweets para atualizar a Store.\nexport const RECEIVE_TWEETS = 'RECEIVE_TWEETS'\n\n//Action Type de quando curtimos os tweets, com o coração cheio ou não,  para atualizar a Store.\nexport const TOGGLE_TWEET   = 'TOGGLE_TWEET'\n\n//Definindo o tipo de evento que ocorrerá quando adicionarmos um novo tweet.\nexport const ADD_TWEET = 'ADD_TWEET'\n\n//Action Creator para executar a Action Typer 'RECEIVE_TWEETS'.\nexport function receiveTweets (tweets) { //Passando tweets como primeiro argumento, quando a função é chamada.\n  return { //return um objeto ou a ação do tipo RECEIVE_TWEETS\n     type: RECEIVE_TWEETS,\n     tweets,\n  }\n}\n\n//Action Creator para executar a Action Typer de curtir ou não com o coração, para atualizar a Store.\nfunction toggleTweet ( {id, authedUser, hasLiked }) { //pegando um objeto que tem esse 3 parâmetros.\n   return { //retorna um objeto ou uma ação. E passamos os argumetos abaixo.\n     type: TOGGLE_TWEET,\n     id,\n     authedUser,\n     hasLiked\n   }\n}\n\n//Action creator para executar ADD_TWEET\nfunction addTweet (tweet) {\n    return {\n      type: ADD_TWEET, //Após configurar a action creator, o próximo passo será descobrir como atualizar o state a partir da ação especifica.\n      tweet,\n    }\n}\n\n//Action creator assíncrono (AJAX) para o addTweet\nexport function handleAddTweet (text, replyingTo) {\n  return (dispatch, getState) => {//O bom de retorna uma função com o middleware Redux-Thunk, é que também será passada uma função getState,\n   const { authedUser } = getState()// que podemos invocar para obter o state atual da Store. Podemos obter authedUser do state invocando getState.\n\n    dispatch(showLoading()) //Antes da solicitação assicrona vamos exibir a barra de carregamento.\n\n   //Depois podemos chamar saveTweet, passando:\n   return saveTweet({\n     text, //texto\n     author : authedUser, //autor\n     replyingTo //e se o tweet for resposta de outro tweet\n   })\n   .then((tweet) => dispatch(addTweet(tweet))) //Estando tudo resolvido, é passar o tweet que vamos obter e disparar a action creator addTweet.\n   .then(() => dispatch(hideLoading())) //Depois disparar a action creator hideLoading.\n }\n}\n\n// Após a configuração do toggleTweet, abaixo temos action creator assíncrono (AJAX) que será responsável por invocar a função saveLikeToggle e\n// salvar no DB.\n//E disparar toggleTweet para salvar as informações no DB.\n// O proximo passo é criar uma Reduce para decidirmos como o state da Store Redux mudará, a partir da ação toggleTweet.\nexport function handleToggleTweet(info) { //pegará as informações do tweet\n  return (dispatch) => { //Como teremos uma solicitação AJAX aqui dentro, return uma arrow function para podermos dispara sempre que quisermos.\n    dispatch(toggleTweet(info)) //info - terá id, authedUser e hasLiked. Perceba que aqui estamos usando \"ATUALIZAÇÃO OTIMISTAS\"\n\n  return saveLikeToggle(info)\n    .catch((e) => { //se houver erro\n       console.warn('Erro no handleToggleTweet: ', e)\n       dispatch(toggleTweet(info))\n       alert('The was an error liking the tweet. Try again. ')\n    })\n  }\n}\n","//Action Type de autenticação de usuário para atualizar a Store.\nexport const SET_AUTHED_USER = 'SET_AUTHED_USER'\n\n//Action Creator para executar a Action Typer.\nexport function setAuthedUser (id) { //Passando id como primeiro argumento, quando a função é chamada.\n  return { //return um objeto ou a ação do tipo 'SET_AUTHED_USER'\n    type: SET_AUTHED_USER,\n    id,\n  }\n}\n","//importando o método da API para trazer os users e tweets do DB\nimport { getInitialData } from '../utils/api'\n\n//Importando a Action Creator RECEIVE_USERS\nimport { receiveUsers } from '../actions/users'\n\n//Importando a Action Creator  RECEIVE_TWEETS\nimport { receiveTweets } from '../actions/tweets'\n\n//Importando a Action Creator SET_AUTHED_USER\nimport { setAuthedUser } from '../actions/authedUser'\n\n//Importando 2 criadores de ação para loadingBar aparecer (show) ou não (hide).\nimport { showLoading, hideLoading } from 'react-redux-loading'\n\nconst AUTHED_ID = 'tylermcginnis'\n\n//Função padrão middleware Redux-thunk que retorna uma função de um criador de ação, pois queremos fazer uma solicitação assíncrona dentro data função.\n//Agora a pergunta é: onde despachamos este criador de ação?\nexport function handleInitialData () {\n  return (dispatch) => {\n    dispatch(showLoading()) //Antes de invorcarmos a getInitialData, queremos disparar showLoading para exibir a barra de carregamento.\n    return getInitialData() //return Promise dos objetos abaixo\n      .then(({ users, tweets }) => {\n        dispatch(receiveUsers(users)) //Adicionar os objetos users e adiciona-los ao state do Store Redux. Mas primeiro deve-se disparar actions no users.js\n        dispatch(receiveTweets(tweets)) //Adicionar os objetos users e adiciona-los ao state do Store Redux. Mas primeiro deve-se disparar actions no tweets.js\n        dispatch(setAuthedUser(AUTHED_ID)) //Recebendo o Hard Coding, só para produção\n        dispatch(hideLoading())//E após obtermos as informações de getInitialData de atualizar os usuários, os tweets e configurar os usuários autenticados,\n      })\n  }\n}\n/*Após ter feito as Actions Creators, o próximo passo é configurar as Reducers para modificar o state com base nestas ações.\n\nActions: são fontes de informações que são enviadas da aplicação para a Store. São disparadas pelas Action Creators, que são simples funções que,\nao serem executadas, ativam os Reducers.\n\nDeterminamos previamente que precisamos obter os dados de users e tweets do nosso banco de dados e enviar estes dados para nosso armazenador,\njuntamente com os dados de authedUser, quando a página inicial for carregada.\n\nTambém criamos um criador de ação thunk que obtém os dados do banco de dados e então despacha ações para o armazenador, para configurar três\npedaços do estado que temos no nosso armazenador:\n\nusers\ntweets\nauthedUser\n*/\n","export function formatDate (timestamp) {\n  const d = new Date(timestamp)\n  const time = d.toLocaleTimeString('en-US')\n  return time.substr(0, 5) + time.slice(-2) + ' | ' + d.toLocaleDateString()\n}\n\nexport function formatTweet (tweet, author, authedUser, parentTweet) {\n  const { id, likes, replies, text, timestamp } = tweet\n  const { name, avatarURL } = author\n\n  return {\n    name,\n    id,\n    timestamp,\n    text,\n    avatar: avatarURL,\n    likes: likes.length,\n    replies: replies.length,\n    hasLiked: likes.includes(authedUser),\n    parent: !parentTweet ? null : {\n      author: parentTweet.author,\n      id: parentTweet.id,\n    }\n  }\n}\n","//Criando o componente Tweet.js para passarmos as IDs dos Tweets e renderizar cada Tweet individualmente.\nimport React, { Component }        from 'react'\nimport { connect }                 from 'react-redux' //Convetendo o Tweet em um conteiner.\nimport { formatTweet, formatDate } from '../utils/helpers'\nimport { TiArrowBackOutline}       from 'react-icons/ti/index'\nimport { TiHeartOutline }          from 'react-icons/ti/index'\nimport { TiHeartFullOutline }      from 'react-icons/ti/index'\nimport { handleToggleTweet }       from '../actions/tweets'\nimport { Link, withRouter }        from 'react-router-dom' //Link permitirá clickar nos tweets individualmente\n//withRouter permite configurar o replying do cabeçalho do tweet como botão, para ser redirecionado para o tweet que estamos respondendo.\n\nclass Tweet extends Component {\n  handleLike = (e) => {\n    e.preventDefault()\n\n//Depois de ter criado action e a reducer do TOGGLE_TWEET, teremos que lidar com o tweet\n    const { dispatch, tweet, authedUser } = this.props\n\n//Disparando a invocação de handleToggleTweet.\n//Não precisamos passar um objeto que tem uma propriedade id, o authedUser e o fato de haver curtidas ou não.\n   dispatch(handleToggleTweet({\n     id: tweet.id, //Podemos passar a ID, que verá de tweet.id,\n     hasLiked: tweet.hasLiked, //se há curtidas, que virá de tweet.hasLiked,\n     authedUser //e o authedUser, porque é isso que passamos ao componente Tweet como propriedade, no return da linha 98, \"authedUser\"\n   }))\n  }\n  toParent = (e, id) => {\n    e.preventDefault()\n    this.props.history.push(`/tweet/${id}`) //configurando, withRouter, que queremos ser redirecionado para a nova ID a que estamos respondendo\n    // todo: Redirect to parent Tweet,\n  }\n\n  render() {                          console.log(this.props)\n\n     const { tweet } = this.props //passando via props para o Destructuring assignment abaixo.\n\n     if (tweet === null) {\n       return <p>This tweet doesn t existd</p>\n     } console.log(this.props)\n\n  //Destructuring assignment - todas as constantes virão de tweet que vem de this.props\n  const { name, avatar, timestamp, text, hasLiked, likes, replies, id, parent } = tweet\n\n    return (\n        <Link to={`/tweet/${id}`} className='tweet'> {/*Link configura para clickar no tweet individualmente, /tweet-id */}\n          <img  /*código para renderizar o avatar*/\n            src={avatar}\n            alt={`Avatar of ${name}`}\n            className='avatar'\n          />\n\n          <div className='tweet-info'> {/*código para renderizar o carimbo do nome, hora, data e se está respondendo a outro tweet*/}\n            <span>{name}</span>\n            <div>{formatDate(timestamp)}</div>\n            {parent && (\n              <button className='replying-to' onClick={(e) => this.toParent(e, parent.id)}>\n                 Replying to @{parent.author}\n              </button>\n            )}\n            <p>{text}</p>\n            <div className='tweet-icons'>\n              <TiArrowBackOutline className='tweet-icon' />\n                <span>{replies !== 0 && replies}</span>\n                <button className='heart-button' onClick={this.handleLike}>\n                  {hasLiked === true\n                    ? <TiHeartFullOutline color='#e0245e' className='tweet-icon' />\n                    : <TiHeartOutline className='tweet-icon' />\n                  }\n                </button>\n                <span>{likes !== 0 && likes}</span>\n            </div>\n          </div>\n        </Link>\n    )\n  }\n}\n/*Qual state o componente precisa da store redux? Nos parâmetros abaixo passamos ao componente uma propriedade, como segundo argumento.\nObserve que dentro do componente Dashboard, estamos passando uma prop id para o componente Tweet:   <Tweet id={id} />\nComo estamos fazendo isso? O segundo argumento da função mapStateToProps (ownProps) será um objeto que tem uma propriedade id com este valor:\n    mapStateToProps(StoreState, [ownProps]) ->   function mapStateToProps ({authedUser, users, tweets}, { id })\n\nUma coisa importante a se observar aqui é que mapStateToProps aceita dois argumentos:\n\na) o estado do armazenador\nb) as props que foram passadas para o componente Tweet\n\nEstamos desestruturando ambos argumentos. Estamos extraindo do armazenador:\n\n    os dados authedUser\n    os dados de usuários\n    os dados de tweets\n\nEntão estamos obtendo o id das props passadas para o componente Tweets. Precisamos de ambas porções de dados (que vem do estado do armazenador e\n do componente) para que possamos determinar qual tweet deve ser exibido pelo componente Tweet.\n*/\nfunction mapStateToProps ({authedUser, users, tweets}, { id }) {\n    const tweet = tweets[id] //Agora podemos passar qualquer coisa ao componente Tweet.\n    const parentTweet = tweet ? tweets[tweet.replyingTo] : null//Obtendo informações do tweet pai, para saber se é um tweet novo ou resposta de um anterior\n\n    return {\n      authedUser,//E então passaremos o usuário autenticado. Assim, sempre que gostarmos de um tweet ou respondermos a um tweet saberemos quem é o usuário.\n      tweet: tweet\n       ? formatTweet(tweet, users[tweet.author], authedUser, parentTweet) //Também queremos passar o próprio tweet e o usuário que o criou.\n       : null\n    }\n}\n//invocando o connect e passando o mapStateToProps e o componente Tweet para ter acesso ao state Redux.\nexport default withRouter(connect(mapStateToProps)(Tweet))\n\n//withRouter - empacotando todo o componente para ser Roteado, pois não estava sendo renderizado pelo React Router, isto irá passar nosso\n//componente connect, que vai passar ao componente Tweet todas as router props, o que vai nos permitir fazer o this.props.history.push,\n//da linha 29\n","import React, { Component } from 'react'\nimport { connect }          from 'react-redux' //Convetendo o Dashboard em um conteiner.\nimport Tweet                from './Tweet'\n\n//Quais dados da store este componente precisará? renderizará os tweets!\nclass Dashboard extends Component {\n  render() {                             //console.log(this.props)\n    return (\n      <div>\n        <h3 className='center'>Your Timeline</h3>\n        <ul className='dashboard-list'>\n          {this.props.tweetIds.map((id) => (\n            <li key={id}>\n              { /*<div>TWEET ID: {id}</div>  Renderizando o texto dos Tweets para vermos se obtermos os dados corretos. */}\n              <Tweet id={id} /> {/* Renderizamos o Tweet passando uma prop ID */}\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n/*\nUma vez que só nos preocupamos com tweets no armazenador, podemos usar desestruturação para passar a porção tweets do estado do armazenador\ncomo parâmetro para a função mapStateToProps().\n*/\nfunction mapStateToProps ({ tweets }) { //tweets é a fatia do state na store com que o este componente se importa.\n  return {\n    tweetIds: Object.keys(tweets) //tweetIds aparecerá como uma propriedade deste container.\n      .sort((a,b) => tweets[b].timestamp - tweets[a].timestamp) //assim pegaremos os diferentes IDs dos tweets, para que eles apareçam\n  }                                                            // de acordo com o rótumo de tempo.\n}\n\nexport default connect(mapStateToProps)(Dashboard)\n\n/*\nPara criar um container, precisamos usar a função connect(). Lembre-se que a assinatura da função connect se parece assim:\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n\nmapStateToProps - Caso este argumento seja especificado, o novo componente vai receber as atualizações do store do React.\nIsso significa que a função mapStateToProps será chamada toda vez que o store for atualizado. O resultado de mapStateToProps deve ser um objeto simples,\nque será incorporado às props do componente. Se você não quiser receber atualizações do armazenador, passe um argumento null ou undefined no\nlugar de mapStateToProps.\n\nLembre-se que a assinatura da função mapStateToProps é:\n    mapStateToProps(state, [ownProps])\n\n1 - state é o estado dentro do armazenador\n2 - ownProps são as propriedades que foram passadas para este componente a partir de um componente pai\n*/\n","import React, { Component } from 'react'\nimport { connect }          from 'react-redux' //Convetendo o NewTweet em um conteiner.\nimport { handleAddTweet }   from '../actions/tweets'\nimport { Redirect }         from 'react-router-dom'\n\n/*                  IMPORTANTISSÍMO\nO que acontece quando alguém clica em “Publicar” para adicionar um novo tweet? O componente Novo Tweet precisará se comunicar como o armazenador.\nNós nos comunicamos com o armazenador ao despacharmos ações. dispatch é um método do armazenador. Isto significa que o componente Novo Tweet\nprecisa ser connect()ado ao Redux. Uma vez que um componente estiver conectado ao armazenador, ele precisará despachar (dispatch) suas props.\n */\n//Este será um componente controlado, state do React ao invés do Redux, pois neste caso, é mais fácil para colocar esta forma de state dentro do Redux.\n//Critério: o state deste componente não está sendo compartilhado com outro componente, nem precisamos passá-lo como propriedade ou camada.\nclass NewTweet extends Component {\n  state = {\n    text: '', //Perceba que com o componente controlado, quando não há texto, o botão de envio fica desabilitado.\n    toHome: false,\n  }\n\n  //Método para atualizar o state\n  handleChange = (e) => {\n    const text = e.target.value\n     this.setState(() => ({\n      text\n    }))\n  }\n\n  //Método para submit\n  handleSubmit = (e) => {\n    e.preventDefault()\n\n     const { text }         = this.state\n     const { dispatch, id } = this.props\n\n     dispatch(handleAddTweet(text, id))\n\n     // todo: Add Tweet to Store\n     console.log('New Tweet: ', text)\n\n     this.setState(() => ({\n      text: '',\n      toHome: id ? false : true,\n    }))\n  }\n  render() {\n    const { text, toHome } = this.state\n\n//toHome: Redirect to / if submitted  - Quando o formulário for enviado ou o novo tweet for enviado, nos redirecione para \"/\".\n\n     if (toHome === true) {\n       return <Redirect to ='/' />\n     }\n\n     const tweetLeft = 280 - text.length\n\n     return (\n      <div>\n        <h3 className='center'>Compose new Tweet</h3>\n        <form className='new-tweet' onSubmit={this.handleSubmit}>\n          <textarea\n            placeholder=\"What's happening?\"\n            value={text}\n            onChange={this.handleChange}\n            className='textarea'\n            maxLength={280}\n          />\n          {tweetLeft <= 100 && (\n            <div className='tweet-length'>\n              {tweetLeft}\n            </div>\n          )}\n          <button\n            className='btn'\n            type='submit'\n            disabled={text === ''}>\n              Submit\n          </button>\n        </form>\n      </div>\n    )\n  }\n}\n export default connect()(NewTweet)\n","import React, { Component } from 'react'\nimport { connect }          from 'react-redux' //Convertendo TweetPage em um conteiner.\nimport Tweet                from './Tweet'\nimport NewTweet             from './NewTweet'\n\n class TweetPage extends Component {\n  render() {                                      console.log(this.props)\n\n    const { id, replies } = this.props\n\n    return (\n      <div>\n        <Tweet id={id} /> {/*Renderizando o Tweet passando o ID*/}\n\n        <NewTweet id={id} />  {/*Renderizando o NewTweet passando o ID para responder*/}\n        {replies.length !== 0 && <h3 className='center'>Replies</h3>}\n        <ul>\n          {replies.map((replyId) => (\n            <li key={replyId}>\n              <Tweet id={replyId}/>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n function mapStateToProps ({ authedUser, tweets, users }, props) {\n  const { id } = props.match.params //Pegando a ID do comonente ou do tweet que vamos renderizar.\n   return {  //Dados que queremos passar para o componente:\n    id,      //que será o ID do tweet que desejamos renderizar.\n    replies: !tweets[id] //e qualquer informação de resposta. Se não existe um tweet com esta ID\n      ? [] //o array será vazio\n      : tweets[id].replies.sort((a,b,) => tweets[b].timestamp - tweets[a].timestamp) //senão, será um\n  }//tweet individual, que terá um propriedade reply, que é um array. Por isso o sort, pois queremos ondená-los cronologicamente.\n}\n\nexport default connect(mapStateToProps)(TweetPage)\n","import React       from 'react'\nimport { NavLink } from 'react-router-dom'\n\n export default function Nav () {\n  return (\n    <nav className='nav'>\n      <ul>\n        <li>\n          <NavLink to='/' exact activeClassName='active'>\n            Home\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to='/new' activeClassName='active'>\n            New Tweet\n          </NavLink>\n        </li>\n      </ul>\n    </nav>\n  )\n}\n","import React, { Component, Fragment }    from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { connect }                       from 'react-redux'        //Convetendo o App em um conteiner.\nimport { handleInitialData }             from '../actions/shared' //Impotando o thunk que irá despachar os dados do store\nimport Dashboard                         from './Dashboard'\nimport LoadingBar                        from 'react-redux-loading'\nimport NewTweet                          from './NewTweet'\nimport TweetPage                         from './TweetPage'\nimport Nav                               from './Nav'\n\n\nclass App extends Component {\n  componentDidMount() { //Quando o componente App subir, disparemos a invocação do criado de ação handleInitialData.\n    this.props.dispatch(handleInitialData())\n  }\n  render() {\n    return (\n      <Router>\n{/*Normalmente, criaria-se uma DIV aqui, mas isso adicionaria outro DIV à DOM. Para não fazer isso, usa-se o Fragment, que permite passar um único\n  filho, para o component router de React Router, mas que não vai adicionar outros elementos à DOM.  */}\n        <Fragment>{/*Se não configurar este pacote, dará erro, porque precisamos passar um único elemento filho, como filho para Route.*/}\n          <LoadingBar />{/*O que não é o caso neste momento, pois estamos passando a barra de carregamento e uma DIV*/}\n              <div className='container'>\n                <Nav />\n                  { this.props.loading === true\n                    ? null\n                    : <div>\n                        <Route path='/' exact    component={Dashboard} />\n                        <Route path='/tweet/:id' component={TweetPage} />\n                        <Route path='/new'       component={NewTweet}  />\n                      </div> }\n                </div>\n        </Fragment>\n      </Router>\n    )\n  }\n}\n/*<TweetPage match={{params: {id: '8xf0y6ziyjabvozdd253nd' }}} /> } Pagando o ID de um tweet específico.*/\n//Obtendo dados da store\nfunction mapStateToProps ({ authedUser }) {\n  return { //os dados que passaremos para o componente\n    loading: authedUser === null\n  }\n}\n\nexport default connect (mapStateToProps)(App)\n\n/*\nimport React, { Component }  from 'react'\nimport { connect }           from 'react-redux'        //Convetendo o App em um conteiner.\nimport { handleInitialData } from '../actions/shared' //Impotando o thunk que irá despachar os dados do store\nimport Dashboard             from './Dashboard'\n\n\nclass App extends Component {\n  componentDidMount() { //Quando o componente App subir, disparemos a invocação do criado de ação handleInitialData.\n    this.props.dispatch(handleInitialData())\n  }\n  render() {\n    return (\n      <div>\n          <Dashboard />\n\n      </div>\n    )\n  }\n}\n\n//Para obtermos acesso à dispatch, precisamos conectar o componente App. Obs: Após isso, veja no console se funcinou.\nexport default connect()(App)\n//Perceba que não precisamos de nada do state, então deixaremos a primeira invocação em branco.\n\n/*\nPara criar um container, precisamos usar a função connect(). Lembre-se que a assinatura da função connect se parece assim:\nconnect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n\nUsar a função connect() transforma um componente em um container. Containers podem ler o estado do armazenador e despachar ações.\nLeia mais sobre nossa capacidade de customizar a interação do nosso container com o armazenador na documentação da API react-redux .\nCertifique-se de passar pelos excelentes exemplos que são fornecidos na documentação associada para obter um entendimento mais profundo do Redux:\n\nhttps://github.com/reduxjs/react-redux/blob/master/docs/api.md\n*/\n","/*Este arquivo vai exportar a nossa invocação para combinar reducers.\nVamos combinar todos estes redutores em um redutor raiz principal, que combinará os resultados das chamadas para o redutor tweets,\no redutor users, e o redutor authedUser em um único objeto para o estado. Lembre-se, precisamos fazer isto porque a função createStore só aceita\num único redutor.\n\n    Reduce root\ncombineReducers({\n  authedUser: authedUser,\n  tweets: tweets,\n  users: users\n});\n\nConfiguração de uma barra de carregamento : import { loadingBarReducer } from 'react-redux-loading'\nO que faremos aqui é adicionar algumas informações sobre o state atual de carregamento do aplicativo na Store Reducers.\n */\nimport { combineReducers }   from 'redux'\nimport authedUser            from './authedUser'\nimport users                 from './users'\nimport tweets                from './tweets'\n\n//o pacote react-redux-loading nos permite exportar o loadingBarReducer\nimport { loadingBarReducer } from 'react-redux-loading'\n\nexport default combineReducers({\n  authedUser,\n  users,\n  tweets,\n  loadingBar: loadingBarReducer, // e isso nos permitirá adicionar a reducer como parte do estado da Store Redux. Obs: No console.log dá para ver o resultado desta configuração\n})//Mas se quisermos usar isso no aplicativo, também precisaremos de alguns criadores de ação (shared.js) para podermos disparar a fim de alterar\n// o state do loadingBar e precisaremos renderizar um componente, que exibirá a IU da loadingBar.\n\n\n/*\nReducers\nUm redutor descreve como o estado de uma aplicação é modificado. Você frequentemente verá o Operador de Espalhamento de Objetos (...) sendo usado\ndentro de um redutor porque um redutor precisa retornar um novo objeto ao invés de alterar o estado antigo. Se você precisar refrescar a memória\nquanto ao operador de espalhamento, veja esta aula de ES6 lesson.\n\nRedutores têm a seguinte assinatura: (previousState, action) => newState\n\nReducers: recebem e tratam as informações para que sejam ou não enviadas à Store.\n*/\n","import { SET_AUTHED_USER } from '../actions/authedUser'\n\n//exportando a reducer authedUser.\nexport default function authedUser (state = null, action) { //default state para um objeto null, quando esta função é usada, quando o state é indefinido, pois como será a primeira vez que será usada e vai conter uma action\n  switch(action.type) { //quando o action.type\n    case SET_AUTHED_USER : // a case for igual a action SET_AUTHED_USER. Recebemos os tweets\n        return action.id\n      default : //retornando o state default quando nenhuma case acima, for equivalente.\n         return state\n\n  }\n}\n\n/*\nReducers\nUm redutor descreve como o estado de uma aplicação é modificado. Você frequentemente verá o Operador de Espalhamento de Objetos (...) sendo usado\ndentro de um redutor porque um redutor precisa retornar um novo objeto ao invés de alterar o estado antigo. Se você precisar refrescar a memória\nquanto ao operador de espalhamento, veja esta aula de ES6 lesson.\n\nRedutores têm a seguinte assinatura:   (previousState, action) => newState\n\nReducers: recebem e tratam as informações para que sejam ou não enviadas à Store.\n*/\n","import { RECEIVE_USERS } from '../actions/users'\n\n//exportando a reducer users.\nexport default function users (state = {}, action) { //que vai configurar o default state para um objeto vazio e vai conter uma action\n  switch(action.type) { //quando o action.type\n    case RECEIVE_USERS : // a case for igual a action RECEIVE_USERS\n      return {//Queremos fundir todos os users neste objeto.\n        ...state, //return o novo state da parte dos users do nosso estado, terá tudo que estava nela, neste caso, um objeto vazio, state = {}\n        ...action.users //assim como todo os users que vamos pegar da action.\n      }\n      default : //retornando o state default quando nenhuma case acima, for equivalente.\n         return state\n\n  }\n}\n\n\n/*\nReducers\nUm redutor descreve como o estado de uma aplicação é modificado. Você frequentemente verá o Operador de Espalhamento de Objetos (...) sendo usado\ndentro de um redutor porque um redutor precisa retornar um novo objeto ao invés de alterar o estado antigo. Se você precisar refrescar a memória\nquanto ao operador de espalhamento, veja esta aula de ES6 lesson.\n\nRedutores têm a seguinte assinatura: (previousState, action) => newState\n\nReducers: recebem e tratam as informações para que sejam ou não enviadas à Store.\n*/\n","import { RECEIVE_TWEETS, TOGGLE_TWEET, ADD_TWEET } from '../actions/tweets'\n\n//exportando a reducer tweets.\nexport default function tweets (state = {}, action) { //que vai configurar o default state para um objeto vazio e vai conter uma action\n  switch(action.type) { //quando o action.type\n    case RECEIVE_TWEETS : // a case for igual a action RECEIVE_TWEETS. Recebemos os tweets\n      return { //Queremos fundir todos os tweets neste objeto.\n        ...state, //return o novo state da parte dos users do nosso estado, terá tudo que estava nela, neste caso, um objeto vazio, state = {}\n        ...action.tweets //assim como todo os tweets que vamos pegar da action.\n      }\n\n      /*Adicionando a case reduce TOGGLE_TWEET, após ter criado a action TOGGLE_TWEET, que está sendo importada na linha 1.\n\n        Como alterar o formato da parte tweets (store) do state = {} ?\n          Analizando o console, verificamos que cada tweet tem propriedades específicas.\n          Podemos rastrear os tipos de curtidas com o array likes (vi no console), se o usuário curte um tweet pela primeira vez, o ID dele será\n          colocado no array likes. Mas se ele deixar de curtir, removeremos o nome do usuário do array likes.\n      */\n  case TOGGLE_TWEET :\n   return {  //Espalhamos os tweets antigos no state, pois não queremos mudar o state diretamente. Então retornamos um novo objeto e espalharemos\n    ...state,  // os tweets anteriores nele.\n      [action.id] : { //Mas o que desejamos é o tweet com a ID do que estamos passando para action.id, que precisará ser um novo objeto.\n      ...state[action.id], //Pegando as propriedades do objeto e as espalharemos neste novo objeto.\n        likes: action.hasLiked === true //Mas queremos que este array likes,\n          ? state[action.id].likes.filter((uid) => uid !== action.authedUser) //remova o nome do usuário\n          : state[action.id].likes.concat([action.authedUser]) //ou o adicione, a partir da curtida.\n      }\n  }\n  //Sempre que adicionarmos um novo tweet, nós o adicionaremos ao array tweets, na qual está a parte tweet do state, que tecnicamente é um Objeto\n      case ADD_TWEET :\n        const { tweet } = action\n\n//Mas também, caso o tweet seja resposta de um outro, pegar o novo tweet e espalhando as propriedades antigas no novo tweet,\n        let replyingTo = {} //Concatenando o array replies com a nova resposta que acabamos de criar e espalhando o Objeto no array tweets\n        if (tweet.replyingTo !== null) {\n          replyingTo = {\n            [tweet.replyingTo] : {\n              ...state[tweet.replyingTo],\n            replies: state[tweet.replyingTo].replies.concat([tweet.id])\n            }\n          }\n        }\n        return { // 1 - Sempre que adicionarmos um novo tweet\n          ...state,\n          [action.tweet.id]: action.tweet, // 3 - na qual está a parte tweet do state, que tecnicamente é um Objeto\n          ...replyingTo, // 2 - nós o adicionaremos ao array tweets,\n        }\n\n      default : //retornando o state default quando nenhuma case acima, for equivalente.\n         return state\n\n  }\n}\n\n/*\nReducers\nUm redutor descreve como o estado de uma aplicação é modificado. Você frequentemente verá o Operador de Espalhamento de Objetos (...) sendo usado\ndentro de um redutor porque um redutor precisa retornar um novo objeto ao invés de alterar o estado antigo. Se você precisar refrescar a memória\nquanto ao operador de espalhamento, veja esta aula de ES6 lesson.\n\nRedutores têm a seguinte assinatura: (previousState, action) => newState\n\nReducers: recebem e tratam as informações para que sejam ou não enviadas à Store.\n*/\n","const logger = (store) => (next) => (action) => {\n  console.group(action.type) //Queremos que o logger mostre quando uma ação é disparada, e qual será o novo state depois que esta ação for disparada\n    console.log('The action: ', action) //Log de qual é ação.\n    const returnValue = next(action) //next(action) que será disparado, passando a ação para ele. Isto irá atualizar o state.\n    console.log('The new state: ', store.getState()) //E vai nos permitir escrever que o novo state é que conseguirmos escrevendo store.getState\n  console.groupEnd() //agrupando tudo no console.\n  return returnValue\n}\n\nexport default logger\n\n/*\nMiddleware\nNossa última etapa de preparação envolve a configuração das funções de Middleware da nossa aplicação. Assim como na aplicação anterior de afazeres,\nvamos criar um middleware de registro que nos ajudará a visualizar as ações e o estado do armazenador conforme interagimos com a nossa aplicação.\nAlém disso, já que o criador de ação handleInitialData() em src/actions/shared.js retorna uma função, precisaremos instalar o pacote redux-thunk:\n\nobs: Também incluiremos middleware de registro para facilitar a depuração de bugs.\n\nTodo middleware segue este padrão de currying: const logger = (store) => (next) => (action) => {  // ... }\n1- À constante logger é atribuída a uma função que recebe o store como seu argumento.\n2- Esta função retorna uma outra função, que então recebe next como argumento (que aqui representa o próximo middleware na fila ou a função de despacho).\n3- Esta outra função retorna uma terceira função, que recebe action como argumento. Dentro desta terceira função, temos acesso a store, next e action.\n\nÉ importante observar que o valor do parâmetro next será determinado pela função applyMiddleware. Por quê? Todos middlewares serão chamados na ordem\nem que são listados nesta função. No nosso caso, next será a função dispatch porque logger é o último middleware listado na função applyMiddleware.\n*/\n","/*index.js vai exportar a invocação de applyMiddleware\n\n                       Middleware\nNossa última etapa de preparação envolve a configuração das funções de Middleware da nossa aplicação. Assim como na aplicação anterior de afazeres,\nvamos criar um middleware de registro que nos ajudará a visualizar as ações e o estado do armazenador conforme interagimos com a nossa aplicação.\nAlém disso, já que o criador de ação handleInitialData() em src/actions/shared.js retorna uma função, precisaremos instalar o pacote redux-thunk:\n\nobs: Também incluiremos middleware de registro para facilitar a depuração de bugs.\n\nTodo middleware segue este padrão de currying: const logger = (store) => (next) => (action) => {  // ... }\n1- À constante logger é atribuída a uma função que recebe o store como seu argumento.\n2- Esta função retorna uma outra função, que então recebe next como argumento (que aqui representa o próximo middleware na fila ou a função de despacho).\n3- Esta outra função retorna uma terceira função, que recebe action como argumento. Dentro desta terceira função, temos acesso a store, next e action.\n\nÉ importante observar que o valor do parâmetro next será determinado pela função applyMiddleware. Por quê? Todos middlewares serão chamados na ordem\nem que são listados nesta função. No nosso caso, next será a função dispatch porque logger é o último middleware listado na função applyMiddleware.\n */\n\nimport thunk from 'redux-thunk'           //importando o pacote middleware thunk instalado\nimport logger from './logger'            //importando o arquivo looger.js criado\nimport { applyMiddleware } from 'redux' //importando o applyMiddleware do pacote redux.\n\n\n//A invocação de applyMiddleware será a nossa export default.\n\nexport default applyMiddleware(\n  thunk,\n  logger,\n)\n","import React           from 'react'\nimport ReactDOM        from 'react-dom'\nimport                      './index.css'\nimport App             from './components/App'\nimport { createStore } from 'redux'\nimport { Provider }    from 'react-redux'\nimport reducer         from './reducers'\nimport middleware      from './middleware' //Isto irá dizer \"Ok, importe a export default vinda do arquivo index.js na pasta middleware.\"\n                                          //Temos que garantir que a nossa Store está ciente do pacote middleware instalado e o (logger) criado.\n\n/* Aplicações Redux têm um único armazenador. Precisamos passar o redutor raiz para nossa função createStore() para que o armazenador saiba quais\nporções do estado ele deve ter. O objetivo de se criar um armazenador é permitir que componentes sejam capazes de acessá-lo, sem que tenham que\nrepassar os dados através de múltiplos componentes.*/\nconst  store = createStore(reducer, middleware) //middleware como segundo argumento, quando o aplicativo carregar buscaremos os dados iniciais\n                                               // de que o aplicativo precisa.\n\n/*Empacotar o componente principal do aplicativo dentro do componente Provider, para passarmos a Store para ele.\nO componente Provider (que vem do pacote react-redux) permite que todos componentes acessem o armazenador através da função connect().\n\nGarantindo que passamos a Store para o Provider: <Provider store={store}>  */\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\ndocument.getElementById('root')\n)\n"],"sourceRoot":""}